/*
 * Copyright (C) 2019-2022 Technologic Systems, Inc. dba embeddedTS
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

/dts-v1/;
#include <dt-bindings/input/input.h>
#include <dt-bindings/interrupt-controller/irq.h>
#include "imx6ul.dtsi"

/ {
	model = "embeddedTS i.MX6ul TS-7120";
	compatible = "embeddedts,ts7120", "fsl,imx6ul";

	chosen {
		stdout-path = &uart1;
	};

	memory {
		reg = <0x80000000 0x20000000>;
	};

	leds {
		pinctrl-names = "default";
		compatible = "gpio-leds";

		red-led {
			label = "red-led";
			gpios = <&gpio1 18 GPIO_ACTIVE_LOW>;	// EN_RED_LED#
			default-state = "off";
		};

		green-led {
			label = "green-led";
			gpios = <&gpio1 19 GPIO_ACTIVE_LOW>;	// EN_GRN_LED#
			default-state = "on";
		};
	};

	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		linux,cma {
			compatible = "shared-dma-pool";
			reusable;
			size = <0x14000000>;
			linux,cma-default;
		};
	};

	aliases {
		ethernet0 = &fec2;
		ethernet1 = &fec1;
	};

	pxp_v4l2 {
		compatible = "fsl,imx6ul-pxp-v4l2", "fsl,imx6sx-pxp-v4l2", "fsl,imx6sl-pxp-v4l2";
		status = "disabled";
	};

	regulators {
		compatible = "simple-bus";
		#address-cells = <1>;
		#size-cells = <0>;

		reg_gpio_dvfs: regulator-gpio {
			compatible = "regulator-gpio";
			pinctrl-names = "default";
			pinctrl-0 = <&pinctrl_dvfs>;
			regulator-min-microvolt = <1300000>;
			regulator-max-microvolt = <1400000>;
			regulator-name = "gpio_dvfs";
			regulator-type = "voltage";
			gpios = <&gpio5 3 GPIO_ACTIVE_HIGH>;	// this is the TAMPER3 pin
			states = <1300000 0x1 1400000 0x0>;
		};

		reg_emmc_vmmc: emmc_vmmc {
			compatible = "regulator-fixed";
			regulator-name = "EMMC_PWR";
			regulator-min-microvolt = <3300000>;
			regulator-max-microvolt = <3300000>;
			//gpio = <&gpio6 29 GPIO_ACTIVE_LOW>;	// en_emmc_3v3_padn driven by FPGA
			//enable-active-low;
			regulator-always-on;
			regulator-boot-on;
		};

		reg_can_xcvr: can_xcvr {
			compatible = "regulator-fixed";
			regulator-name = "CAN_PWR";
			regulator-min-microvolt = <5000000>;
			regulator-max-microvolt = <5000000>;
			gpio = <&gpio6 21 GPIO_ACTIVE_LOW>;	// en_can_xcvr_padn driven by FPGA
			enable-active-low;
		};

		reg_eth_phy: eth_phy {
			compatible = "regulator-fixed";
			regulator-name = "ETH_PHY_PWR";
			regulator-min-microvolt = <3300000>;
			regulator-max-microvolt = <3300000>;
			gpio = <&gpio1 10 GPIO_ACTIVE_HIGH>;	// EN_ETH_PHY_PWR driven by CPU
			enable-active-high;
			regulator-always-on;
			regulator-boot-on;
		};

		reg_usb_otg1_vbus: regulator@1 {
			compatible = "regulator-fixed";
			regulator-name = "usb_otg1_vbus";
			regulator-min-microvolt = <5000000>;
			regulator-max-microvolt = <5000000>;
			regulator-always-on;
			regulator-boot-on;
		};

		reg_usb_otg2_vbus: regulator@2 {
			compatible = "regulator-fixed";
			regulator-name = "usb_otg2_vbus";
			regulator-min-microvolt = <5000000>;
			regulator-max-microvolt = <5000000>;
			regulator-always-on;
			regulator-boot-on;
		};

		reg_adc_vref: adc_vref {
			compatible = "regulator-fixed";
			regulator-name = "ADC_VREF";
			regulator-min-microvolt = <2500000>;
			regulator-max-microvolt = <2500000>;
			//gpio = EN_2.5_VREF driven by Silabs;
			//enable-active-high;
		};
	};

	i2c_gpio@0 {
		compatible = "i2c-gpio";
		clock-frequency = <100000>;
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_i2c4_gpio>;

		gpios = <
			&gpio1 26 GPIO_ACTIVE_HIGH /* MIKRO_I2C_DAT */
			&gpio1 27 GPIO_ACTIVE_HIGH /* MIKRO_I2C_CLK */
			>;

		status = "okay";
		i2c-gpio,sda-open-drain;
		i2c-gpio,scl-open-drain;
		i2c-gpio,delay-us = <2>;	/* ~100 kHz */
		#address-cells = <1>;
		#size-cells = <0>;

		/** Example:  An i2c SSD1306 OLED display may be attached to the
				Mikrobus socket, or to HD20, using the following configuration...

		 ssd1306: oled@3c {
			compatible = "solomon,ssd1306fb-i2c";
			reg = <0x3c>;
			reset-gpios = <&gpio6 10 0>;		// DIO_13
			solomon,height = <64>;
			solomon,width = <128>;
			solomon,page-offset = <0>;
			solomon,com-invdir;
			solomon,com-offset = <0>;
			solomon,prechargep1 = <1>;
			solomon,prechargep2 = <0xF>;
			status = "okay";
		};
		*/

	};


};

&cpu0 {
	arm-supply = <&reg_arm>;
	soc-supply = <&reg_soc>;
	dc-supply = <&reg_gpio_dvfs>;
};


&fec1 {
	phy-supply = <&reg_eth_phy>;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_enet1>;
	phy-mode = "rmii";
	phy-handle = <&ethphy0>;
	status = "okay";
};

&fec2 {
	phy-supply = <&reg_eth_phy>;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_enet2>;
	phy-mode = "rmii";
	phy-handle = <&ethphy1>;
	status = "okay";

	mdio {
		#address-cells = <1>;
		#size-cells = <0>;

		ethphy0: ethernet-phy@2 {
			compatible = "ethernet-phy-ieee802.3-c22";
			reg = <2>;
		};

		ethphy1: ethernet-phy@1 {
			compatible = "ethernet-phy-ieee802.3-c22";
			reg = <1>;
		};
	};
};

&flexcan1 {	// Screw terminals
	xceiver-supply = <&reg_can_xcvr>;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_flexcan1>;
	status = "okay";
};

&flexcan2 {	// COM header
	xceiver-supply = <&reg_can_xcvr>;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_flexcan2>;
	status = "okay";
};

&gpc {
	fsl,cpu_pupscr_sw2iso = <0x1>;
	fsl,cpu_pupscr_sw = <0x0>;
	fsl,cpu_pdnscr_iso2sw = <0x1>;
	fsl,cpu_pdnscr_iso = <0x1>;
	fsl,ldo-bypass = <0>; /* DCDC, ldo-enable */
};

&uart1 {	// console (aka /dev/ttymxc0)
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart1>;
	status = "okay";
};

&uart2 {	// COM header (aka /dev/ttymxc1)
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart2>;
	status = "okay";
};

&uart3 {	// DMX RJ45 (aka /dev/ttymxc2)
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart3>;
	status = "okay";
};

&uart4 {	// OBD STN1110 (aka /dev/ttymxc3)
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart4>;
	status = "okay";
};

&uart5 {	// Screw terminals (CN32-B) (aka /dev/ttymxc4)
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart5>;
	status = "okay";
};

&uart7 {	// Mikro Bus Socket (aka /dev/ttymxc6)
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart7>;
	status = "okay";
};


&usbotg1 {
	vbus-supply = <&reg_usb_otg1_vbus>;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_usb_otg1_id>;
	srp-disable;
	hnp-disable;
	adp-disable;
	status = "okay";
};

&usbotg2 {
	vbus-supply = <&reg_usb_otg2_vbus>;
	dr_mode = "host";
	disable-over-current;
	status = "okay";
};

&usdhc1 {	// eMMC
	pinctrl-names = "default", "state_100mhz", "state_200mhz";
	pinctrl-0 = <&pinctrl_usdhc1>;
	pinctrl-1 = <&pinctrl_usdhc1_100mhz>;
	pinctrl-2 = <&pinctrl_usdhc1_200mhz>;
	keep-power-in-suspend;
	enable-sdio-wakeup;
	bus-width = <4>;
	vmmc-supply = <&reg_emmc_vmmc>;
	status = "okay";
};


&i2c1 { // bus #0, Used by RTC; Gyro; and Silabs.
	clock-frequency = <100000>;
	pinctrl-names = "default", "gpio";
	pinctrl-0 = <&pinctrl_i2c1>;
	status = "okay";

	rtc: m41t00s@68 {
		compatible = "m41t00";
		reg = <0x68>;
	};

	imu: mpu9250a@69 {
		compatible = "mpu9250";
		reg = <0x69>;
		/* Note: GYRO_INT goes to the FPGA */
	};

};

&i2c3 {	// bus #2, Used by the cryptokey chip;  and CN99 off-board i2c
	clock-frequency = <100000>;
	pinctrl-names = "default", "gpio";
	pinctrl-0 = <&pinctrl_i2c3>;
	status = "okay";

	cryptokey: atsha204@64 {
		/* ATSHA204A Microchip CryptoAuthentication */
		compatible = "atsha204";
		reg = <0x64>;	// a different address may be programmed into
							// the device's EEPROM
	};
};

&weim {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_weim_fpga &pinctrl_weim_cs0>;
	#address-cells = <2>;
	#size-cells = <1>;
	clocks = <&clks IMX6UL_CLK_EIM>, <&clks IMX6UL_CLK_EIM_SLOW_SEL>;
	ranges = <0 0 0x50000000 0x08000000>;
	status = "okay";

	fpga: fpga@50000000 {
			compatible = "simple-bus";
			reg = <0 0x50000000 0x00010000>;
			#address-cells = <1>;
			#size-cells = <1>;
			ranges = <0 0 0 0x10000>;

			fsl,weim-cs-timing = <
				0x0161030F	// EIM_CSnGCR1 @ 0x021b8000
				0x00000000	// EIM_CSnGCR2 @ 0x021b8004
				0x03000000	// EIM_CSnRCR1 @ 0x021b8008
				0x00000000	// EIM_CSnRCR2 @ 0x021b800c
				0x01000000  // EIM_CSnWCR1 @ 0x021b8010
				0 				// EIM_CSnWCR2	@ 0x021b8014
			>;

		status = "okay";

		clocks {
			#address-cells = <1>;
			#size-cells = <1>;
			ranges;

			fpga_clk_99MHz: fpga_clk_99MHz {
				#clock-cells = <0>;
				compatible = "fixed-clock";
				clock-frequency = <99000000>;
			};
		};

		fpga_uart0: serial@0 {
			compatible = "ns16550a";
			device_type = "serial";
			current-speed = <115200>;
			reg-shift = <1>;
			reg-io-width = <1>;
			reg = <0 16>;
			clock-frequency = <1843200>;
			interrupt-parent = <&fpga_intc>;
			interrupts = <0>;
			status = "okay";
		};

		fpga_uart1: serial@10 {
			compatible = "ns16550a";
			device_type = "serial";
			current-speed = <115200>;
			reg-shift = <1>;
			reg-io-width = <1>;
			reg = <0x10 16>;
			clock-frequency = <1843200>;
			interrupt-parent = <&fpga_intc>;
			interrupts = <1>;
			status = "okay";
		};

		fpga_uart2: serial@20 {
			compatible = "ns16550a";
			device_type = "serial";
			current-speed = <115200>;
			reg-shift = <1>;
			reg-io-width = <1>;
			reg = <0x20 16>;
			clock-frequency = <1843200>;
			interrupt-parent = <&fpga_intc>;
			interrupts = <2>;
			status = "okay";
		};

		fpga_uart3: serial@30 {
			compatible = "ns16550a";
			device_type = "serial";
			current-speed = <115200>;
			reg-shift = <1>;
			reg-io-width = <1>;
			reg = <0x30 16>;
			clock-frequency = <1843200>;
			interrupt-parent = <&fpga_intc>;
			interrupts = <3>;
			status = "okay";
		};

		fpga_uart4: serial@40 {  // RS485 (on CN32)
			compatible = "ns16550a";
			device_type = "serial";
			current-speed = <115200>;
			reg-shift = <1>;
			reg-io-width = <1>;
			reg = <0x40 16>;
			clock-frequency = <1843200>;
			interrupt-parent = <&fpga_intc>;
			interrupts = <4>;
			status = "okay";
		};

		fpga_uart5: serial@50 {	// DMX 485
			compatible = "ns16550";
			device_type = "serial";
			current-speed = <115200>;
			reg-shift = <1>;
			reg-io-width = <1>;
			reg = <0x50 16>;
			clock-frequency = <1843200>;
			interrupt-parent = <&fpga_intc>;
			interrupts = <5>;
			status = "okay";
		};

		fpga_uart6: serial@60 {	// WIFI/Bluetooth
			compatible = "ns16550";
			device_type = "serial";
			current-speed = <115200>;
			reg-shift = <1>;
			reg-io-width = <1>;
			reg = <0x60 16>;
			clock-frequency = <14745600>;
			interrupt-parent = <&fpga_intc>;
			interrupts = <6>;
			status = "okay";
		};

		fpga_uart7: serial@70 {	// XBEE
			compatible = "ns16550";
			device_type = "serial";
			current-speed = <115200>;
			reg-shift = <1>;
			reg-io-width = <1>;
			reg = <0x70 16>;
			clock-frequency = <1843200>;
			interrupt-parent = <&fpga_intc>;
			interrupts = <7>;
			status = "okay";
		};

		fpga_uart8: serial@80 {	// GPS
			compatible = "ns16550";
			device_type = "serial";
			current-speed = <115200>;
			reg-shift = <1>;
			reg-io-width = <1>;
			reg = <0x80 16>;
			clock-frequency = <1843200>;
			interrupt-parent = <&fpga_intc>;
			interrupts = <8>;
		};

		tssdcard: tssdcard1@200 { /* drivers/mmc/host/tssdcard.c */
			compatible = "embeddedts,tssdcard";
			#address-cells = <0x2>;
			#size-cells = <0x2>;
			/* driver requires access to 0x200 for the core, and also to syscon */
			reg = <0x200 0x200 0x4000 0x200>;
			tssdcard,ndevices = <1>;
			tssdcard,poll_rate = <1>;
			tssdcard,disable_poll = <0>;
			status = "okay";
		};

		opencores_spi0: opencores_spi@0 {
			#address-cells = <1>;
			#size-cells = <0>;
			compatible = "opencores,spi-oc";
			reg = <0x100 32>;
			interrupt-parent = <&fpga_intc>;
			interrupts = <9>;
			clocks = <&fpga_clk_99MHz>;
			clock-names = "spi-oc-clk";
			opencores-spi,idx = <0>;
			opencores-spi,num-chipselects = <1>;

			/* This is actually the FRAM, which is compatible with
				the AT25 SPI EEPROM */
			eeprom: at25@0 {
				compatible = "atmel,at25";
				at25,byte-len = <2048>;
				at25,addr-mode = <2>;
				at25,page-size = <32>;
				reg = <0>;
				spi-max-frequency = <1000000>;
				status = "okay";
			};
		};

		opencores_spi1: opencores_spi@1 {
			compatible = "opencores,spi-oc";
			reg = <0x120 32>;
			interrupt-parent = <&fpga_intc>;
			interrupts = <10>;
			clocks = <&fpga_clk_99MHz>;
			clock-names = "spi-oc-clk";
			opencores-spi,idx = <1>;
			opencores-spi,num-chipselects = <1>;

			/* Daughter-card SPI */
		};

		opencores_spi2: opencores_spi@2 {
			#address-cells = <1>;
			#size-cells = <0>;
			compatible = "opencores,spi-oc";
			reg = <0x140 32>;
			interrupt-parent = <&fpga_intc>;
			interrupts = <11>;
			clocks = <&fpga_clk_99MHz>;
			clock-names = "spi-oc-clk";
			opencores-spi,idx = <2>;
			opencores-spi,num-chipselects = <1>;

			/* Mikrobus Socket */
			/** Example:  An SPI SSD1306 OLED display may be attached to the
				Mikrobus socket, using the following configuration...

			ssd1306: ssd1306@0 {
				compatible = "solomon,ssd1306fb-spi";
				reg = <0>;
				spi-max-frequency = <10000000>;
				reset-gpios = <&gpio6 10 0>;		// DIO_13
				datcmd-gpios = <&gpio6 11 0>;		// DIO_14
				solomon,height = <64>;
				solomon,width = <128>;
				solomon,page-offset = <0>;
				solomon,com-invdir;
				solomon,com-offset = <0>;
				solomon,prechargep1 = <1>;
				solomon,prechargep2 = <0xF>;
				status = "okay";
			};
			*/
		};


		syscon: syscon@4000 {
			compatible = "simple-bus";
			#address-cells = <0x2>;
			#size-cells = <0x1>;
			reg = <0x4000 0x50>;
			ranges = <0 0 0x4000 0x50>;
			status = "okay";

			gpio6: fpga_gpio6@10 { /* drivers/gpio/gpio-ts7120.c */
				compatible = "embeddedts,TS7120-gpio";
				reg = <0 0 0x50>;
				gpio-controller;
				#gpio-cells = <2>;
				base = <160>;
				ngpios = <32>;
				interrupt-controller;
				#interrupt-cells = <1>;
				status = "okay";
			};

			micro_pwm: micro_pwm@3c { /* drivers/pwm/pwm-ts71xx.c */
				compatible = "embeddedts,ts7120-pwm";
				reg = <0x3c 0 4>;
				clocks = <&fpga_clk_99MHz>;
				clock-names = "fpga-pwm-clk";
				status = "okay";
			};


			fpga_intc: 	fpga_intc@0 { /* drivers/misc/ts-fpga/ts7120-intc.c */
				compatible = "embeddedts,TS7120-intc";

				interrupt-controller;
				#interrupt-cells = <1>;
				reg = <0 0 0x50>;

				interrupt-parent = <&gpio5>;
				interrupts = <1 IRQ_TYPE_EDGE_RISING>;
				status = "okay";
			};

		};

	 };


};

&snvs_poweroff {
	status = "okay";
};

&snvs_rtc {
	status = "disabled";
};



&adc1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_adc>;
	vref-supply = <&reg_adc_vref>;
	num-channels = <10>;
	status = "okay";
};

&ecspi3 {
	fsl,spi-num-chipselects = <1>;
	cs-gpios = <&gpio4 12 0>;		// SPI_3_CS#
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_ecspi3>;
	status = "okay";

	wilc_spi@0 {
		compatible = "atmel,wilc_spi";
		reg = <0>;
		spi-max-frequency = <24000000>;
		wilc3000,reset-gpios = <&gpio6 31 GPIO_ACTIVE_LOW>;    /* RESET#, via fpga  */
		wilc3000,chip-en-gpios = <&gpio6 26 GPIO_ACTIVE_HIGH>;   /* Power enable via fpga */
		interrupt-parent = <&fpga_intc>;
		interrupts = <15>;

		status = "okay";
	 };
};


&iomuxc {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_hog>;
	imx6ul-ts7120 {
		pinctrl_hog: hoggrp {
			fsl,pins = <

			MX6UL_PAD_SNVS_TAMPER0__GPIO5_IO00	0x11020 // POWER_FAIL_3V
			MX6UL_PAD_SNVS_TAMPER1__GPIO5_IO01	0x13020 // FPGA_IRQ
			/* TAMPER2 is N/C on TS-7120 */
			/* TAMPER3 is GPIO_DVFS, see below */
			MX6UL_PAD_SNVS_TAMPER4__GPIO5_IO04	0x1b020 // EN_RELAY_1 (gpio132)
			MX6UL_PAD_SNVS_TAMPER5__GPIO5_IO05	0x1b020 // EN_RELAY_2 (gpio133)
			MX6UL_PAD_SNVS_TAMPER6__GPIO5_IO06	0x1b020 // EN_RELAY_3 (gpio134)
			MX6UL_PAD_SNVS_TAMPER7__GPIO5_IO07	0x1b020 // EN_RELAY_4 (gpio135)
			MX6UL_PAD_SNVS_TAMPER8__GPIO5_IO08	0x1b020 // EN_RELAY_5 (gpio136)
			MX6UL_PAD_SNVS_TAMPER9__GPIO5_IO09	0x1b020 // EN_RELAY_6 (gpio137)
			MX6UL_PAD_UART1_CTS_B__GPIO1_IO18	0x1b020 // EN_RED_LED#
			MX6UL_PAD_UART1_RTS_B__GPIO1_IO19	0x1b020 // EN_GRN_LED#
			>;
		};

		/******************************************************************/
		/**** USB OTG ****/
		pinctrl_usb_otg1_id: usbotg1idgrp {
			fsl,pins = <
				MX6UL_PAD_GPIO1_IO00__ANATOP_OTG1_ID	0x17059	// BOOT_MODE_0
			>;
		};

		/******************************************************************/
		/**** CAN ****/
		pinctrl_flexcan1: flexcan1grp{
			fsl,pins = <
				MX6UL_PAD_LCD_DATA08__FLEXCAN1_TX	0x1b020	// CAN_1_TXD
				MX6UL_PAD_LCD_DATA09__FLEXCAN1_RX	0x1b020	// CAN_1_RXD_3V
			>;
		};

		pinctrl_flexcan2: flexcan2grp{
			fsl,pins = <
				MX6UL_PAD_UART2_CTS_B__FLEXCAN2_TX	0x1b020	// CAN_2_TXD
				MX6UL_PAD_UART2_RTS_B__FLEXCAN2_RX	0x1b020	// CAN_2_RXD_3V
			>;
		};

		/******************************************************************/
		/**** UARTS ****/
		pinctrl_uart1: uart1grp {
			fsl,pins = <
				MX6UL_PAD_UART1_TX_DATA__UART1_DCE_TX 0x1b0b1	// CONSOLE_TXD
				MX6UL_PAD_UART1_RX_DATA__UART1_DCE_RX 0x1b0b1	// CONSOLE_RXD
			>;
		};

		pinctrl_uart2: uart2grp {
			fsl,pins = <
				MX6UL_PAD_UART2_TX_DATA__UART2_DCE_TX	0x1b0b1	// UART2_TXD
				MX6UL_PAD_UART2_RX_DATA__UART2_DCE_RX	0x1b0b1	// UART2_RXD
			>;
		};

		pinctrl_uart3: uart3grp {
			fsl,pins = <
				MX6UL_PAD_UART3_RX_DATA__UART3_DCE_RX	0x1b0b1	// UART3_RXD_3V
				MX6UL_PAD_UART3_TX_DATA__UART3_DCE_TX	0x1b0b1	// UART3_TXD
			>;
		};

		pinctrl_uart4: uart4grp {
			fsl,pins = <
				MX6UL_PAD_UART4_RX_DATA__UART4_DCE_RX	0x1b0b1	// UART4_RXD_3V
				MX6UL_PAD_UART4_TX_DATA__UART4_DCE_TX	0x1b0b1	// UART4_TXD
			>;
		};

		pinctrl_uart5: uart5grp {
			fsl,pins = <
				MX6UL_PAD_UART5_RX_DATA__UART5_DCE_RX	0x1b0b1	// UART5_RXD
				MX6UL_PAD_UART5_TX_DATA__UART5_DCE_TX	0x1b0b1	// UART5_TXD
			>;
		};

		pinctrl_uart7: uart7grp {
			fsl,pins = <
				MX6UL_PAD_LCD_DATA17__UART7_DCE_RX	0x1b0b1	// UART7_RXD
				MX6UL_PAD_LCD_DATA16__UART7_DCE_TX	0x1b0b1	// UART7_TXD
			>;
		};


		/**** ETHERNET ****/
		pinctrl_enet1: enet1grp {
			fsl,pins = <
				MX6UL_PAD_ENET1_RX_EN__ENET1_RX_EN	0x1b0b0	// to ETH1 PHY CRS
				MX6UL_PAD_ENET1_RX_ER__ENET1_RX_ER	0x1b0b0  // to ETH1 PHY RXER
				MX6UL_PAD_ENET1_RX_DATA0__ENET1_RDATA00	0x1b0b0 // to ETH1 PHY RXD0
				MX6UL_PAD_ENET1_RX_DATA1__ENET1_RDATA01	0x1b0b0 // to ETH1 PHY RXD1
				MX6UL_PAD_ENET1_TX_EN__ENET1_TX_EN	0x1b0b0 // to ETH1 PHY TXEN
				MX6UL_PAD_ENET1_TX_DATA0__ENET1_TDATA00	0x1b0b0 // to ETH1 PHY TXD0
				MX6UL_PAD_ENET1_TX_DATA1__ENET1_TDATA01	0x1b0b0 // to ETH1 PHY TXD1
				MX6UL_PAD_ENET1_TX_CLK__ENET1_REF_CLK1	0x4001b031 // to ETH1 PHY XTAL_IN
			>;
		};

		pinctrl_enet2: enet2grp {
			fsl,pins = <
				MX6UL_PAD_GPIO1_IO07__ENET2_MDC		0x1b0b0	// ETH_MDC
				MX6UL_PAD_GPIO1_IO06__ENET2_MDIO	0x1b0b0		// ETH_MDIO
				MX6UL_PAD_ENET2_RX_EN__ENET2_RX_EN	0x1b0b0	// to ETH2 PHY CRS
				MX6UL_PAD_ENET2_RX_ER__ENET2_RX_ER	0x1b0b0	// to ETH2 PHY RXER
				MX6UL_PAD_ENET2_RX_DATA0__ENET2_RDATA00	0x1b0b0 // to ETH2 PHY RXD0
				MX6UL_PAD_ENET2_RX_DATA1__ENET2_RDATA01	0x1b0b0 // to ETH2 PHY RXD1
				MX6UL_PAD_ENET2_TX_EN__ENET2_TX_EN	0x1b0b0	// to ETH2 PHY TXEN
				MX6UL_PAD_ENET2_TX_DATA0__ENET2_TDATA00	0x1b0b0 // to ETH2 PHY TXD0
				MX6UL_PAD_ENET2_TX_DATA1__ENET2_TDATA01	0x1b0b0 // to ETH2 PHY TXD1
				MX6UL_PAD_ENET2_TX_CLK__ENET2_REF_CLK2	0x4001b031 // to ETH2 PHY XTAL_IN

				MX6UL_PAD_JTAG_MOD__GPIO1_IO10      0x1f0b0	// EN_ETH_PHY_PWR
			>;
		};

		/******************************************************************/
		/**** I2C (cpu) ***/
		pinctrl_i2c1: i2c1grp {
			fsl,pins = <
				MX6UL_PAD_GPIO1_IO02__I2C1_SCL 0x4001b8b0	// I2C_1_CLK
				MX6UL_PAD_GPIO1_IO03__I2C1_SDA 0x4001b8b0 // I2C_1_DAT
			>;
		};

		pinctrl_i2c3: i2c3grp {
			fsl,pins = <
				MX6UL_PAD_LCD_DATA01__I2C3_SCL 0x4001b8b0	// I2C_3_CLK
				MX6UL_PAD_LCD_DATA00__I2C3_SDA 0x4001b8b0	// I2C_3_DAT
			>;
		};

		/**** I2C (bit-banged gpio) ***/
		pinctrl_i2c4_gpio: i2c4grpgpio {
			fsl,pins = <
				MX6UL_PAD_UART3_CTS_B__GPIO1_IO26	0x4001a8b0	// MIKRO_I2C_DAT
				MX6UL_PAD_UART3_RTS_B__GPIO1_IO27	0x4001a8b0	// MIKRO_I2C_CLK
			>;
		};


		/******************************************************************/
		/**** ADC ****/
		pinctrl_adc: adcgrp {
			fsl,pins = <
				MX6UL_PAD_GPIO1_IO04__GPIO1_IO04       0x1b020   // ADC_1
				MX6UL_PAD_GPIO1_IO05__GPIO1_IO05       0x1b020   // ADC_2
				MX6UL_PAD_GPIO1_IO08__GPIO1_IO08       0x1b020   // ADC_3
				MX6UL_PAD_GPIO1_IO09__GPIO1_IO09       0x1b020   // ADC_4
			>;
		};


		/******************************************************************/
		/**** USDHC (eMMC) ****/
		pinctrl_usdhc1: usdhc1grp {
			fsl,pins = <
				MX6UL_PAD_SD1_CMD__USDHC1_CMD        0x17059
				MX6UL_PAD_SD1_CLK__USDHC1_CLK        0x10071
				MX6UL_PAD_SD1_DATA0__USDHC1_DATA0    0x17059
				MX6UL_PAD_SD1_DATA1__USDHC1_DATA1    0x17059
				MX6UL_PAD_SD1_DATA2__USDHC1_DATA2    0x17059
				MX6UL_PAD_SD1_DATA3__USDHC1_DATA3    0x17059
			>;
		};


		pinctrl_usdhc1_100mhz: usdhc1grp100mhz {
			fsl,pins = <
				MX6UL_PAD_SD1_CMD__USDHC1_CMD     0x170b9
				MX6UL_PAD_SD1_CLK__USDHC1_CLK     0x100b9
				MX6UL_PAD_SD1_DATA0__USDHC1_DATA0 0x170b9
				MX6UL_PAD_SD1_DATA1__USDHC1_DATA1 0x170b9
				MX6UL_PAD_SD1_DATA2__USDHC1_DATA2 0x170b9
				MX6UL_PAD_SD1_DATA3__USDHC1_DATA3 0x170b9
			>;
		};

		pinctrl_usdhc1_200mhz: usdhc1grp200mhz {
			fsl,pins = <
				MX6UL_PAD_SD1_CMD__USDHC1_CMD     0x170f9
				MX6UL_PAD_SD1_CLK__USDHC1_CLK     0x100f9
				MX6UL_PAD_SD1_DATA0__USDHC1_DATA0 0x170f9
				MX6UL_PAD_SD1_DATA1__USDHC1_DATA1 0x170f9
				MX6UL_PAD_SD1_DATA2__USDHC1_DATA2 0x170f9
				MX6UL_PAD_SD1_DATA3__USDHC1_DATA3 0x170f9
			>;
		};


		/******************************************************************/
		/**** SPI (for WIFI/Bluetooth Module) ****/
		pinctrl_ecspi3: ecspi3grp {
			fsl,pins = <
				MX6UL_PAD_NAND_READY_B__GPIO4_IO12  0x10b0 // SPI_3_CS#
				MX6UL_PAD_NAND_CE0_B__ECSPI3_SCLK   0x10b0 // SPI_3_CLK
				MX6UL_PAD_NAND_CE1_B__ECSPI3_MOSI   0x10b0 // SPI_3_MOSI
				MX6UL_PAD_NAND_CLE__ECSPI3_MISO     0x10b0 // SPI_3_MISO
				// Note: WiFi IRQ goes to the FPGA
			>;
		};


		/******************************************************************/
		/**** DVFS ****/
		pinctrl_dvfs: dvfsgrp {
			fsl,pins = <
				MX6UL_PAD_SNVS_TAMPER3__GPIO5_IO03	0x79	// GPIO_DVFS
			>;
		};


		pinctrl_weim_cs0: weimcs0grp {
			fsl,pins = <
				MX6UL_PAD_CSI_MCLK__GPIO4_IO17 	0xb029			//  EIM_CS0
			//	MX6UL_PAD_CSI_MCLK__EIM_CS0_B		0xb029
			>;
		};

		pinctrl_weim_fpga: weimfpgagrp {
			fsl,pins = <
				MX6UL_PAD_CSI_PIXCLK__EIM_OE			0xb029		// EIM_OE#
				MX6UL_PAD_CSI_VSYNC__EIM_RW			0xb029		// EIM_WE#
				MX6UL_PAD_CSI_HSYNC__EIM_LBA_B		0xb029		// EIM_LBA#
				MX6UL_PAD_NAND_ALE__GPIO4_IO10		0xb029		// EIM_IRQ
				MX6UL_PAD_NAND_DQS__EIM_WAIT			0xb029		// EIM_WAIT
				MX6UL_PAD_NAND_WP_B__EIM_BCLK			0xb029		// EIM_BCLK

				MX6UL_PAD_NAND_DATA07__EIM_AD15		0xb029		// EIM_AD_15
				MX6UL_PAD_NAND_DATA06__EIM_AD14		0xb029
				MX6UL_PAD_NAND_DATA05__EIM_AD13		0xb029
				MX6UL_PAD_NAND_DATA04__EIM_AD12		0xb029
				MX6UL_PAD_NAND_DATA03__EIM_AD11		0xb029
				MX6UL_PAD_NAND_DATA02__EIM_AD10		0xb029
				MX6UL_PAD_NAND_DATA01__EIM_AD09		0xb029
				MX6UL_PAD_NAND_DATA00__EIM_AD08		0xb029
				MX6UL_PAD_CSI_DATA07__EIM_AD07		0xb029
				MX6UL_PAD_CSI_DATA06__EIM_AD06		0xb029
				MX6UL_PAD_CSI_DATA05__EIM_AD05		0xb029
				MX6UL_PAD_CSI_DATA04__EIM_AD04		0xb029
				MX6UL_PAD_CSI_DATA03__EIM_AD03		0xb029
				MX6UL_PAD_CSI_DATA02__EIM_AD02		0xb029
				MX6UL_PAD_CSI_DATA01__EIM_AD01 		0xb029
				MX6UL_PAD_CSI_DATA00__EIM_AD00		0xb029		// EIM_AD_00
			>;
		};
	};
};
